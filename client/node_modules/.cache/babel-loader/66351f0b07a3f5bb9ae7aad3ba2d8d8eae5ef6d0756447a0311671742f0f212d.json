{"ast":null,"code":"// client/src/services/api.js\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// LTI launch\nexport const ltiLaunch = async idToken => {\n  try {\n    const response = await api.post('/lti/launch', {\n      id_token: idToken\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message;\n  }\n};\n\n// client/src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Helper function to make API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  const response = await fetch(url, config);\n  return handleResponse(response);\n};\n\n// Create a new assessment\nexport const createAssessment = async assessmentData => {\n  try {\n    const response = await apiRequest('/assessments', {\n      method: 'POST',\n      body: JSON.stringify(assessmentData)\n    });\n    return response;\n  } catch (error) {\n    console.error('Error creating assessment:', error);\n    throw error;\n  }\n};\n\n// Submit grade to Moodle gradebook\nexport const submitGrade = async assessmentId => {\n  try {\n    const response = await apiRequest(`/assessments/${assessmentId}/submit-grade`, {\n      method: 'POST'\n    });\n    return response;\n  } catch (error) {\n    console.error('Error submitting grade:', error);\n    throw error;\n  }\n};\n\n// Get assessment by ID\nexport const getAssessment = async assessmentId => {\n  try {\n    const response = await apiRequest(`/assessments/${assessmentId}`);\n    return response;\n  } catch (error) {\n    console.error('Error fetching assessment:', error);\n    throw error;\n  }\n};\n\n// Get all assessments for a user\nexport const getUserAssessments = async userId => {\n  try {\n    const response = await apiRequest(`/assessments/user/${userId}`);\n    return response;\n  } catch (error) {\n    console.error('Error fetching user assessments:', error);\n    throw error;\n  }\n};\n\n// Check assessment status (for polling)\nexport const checkAssessmentStatus = async assessmentId => {\n  try {\n    const response = await apiRequest(`/assessments/${assessmentId}/status`);\n    return response;\n  } catch (error) {\n    console.error('Error checking assessment status:', error);\n    throw error;\n  }\n};\n\n// Get assessment with completed check\nexport const getAssessmentWithStatus = async (userId, courseId, resourceLinkId) => {\n  try {\n    var _userAssessments$asse;\n    const userAssessments = await getUserAssessments(userId);\n\n    // Find existing assessment for this resource\n    const existingAssessment = (_userAssessments$asse = userAssessments.assessments) === null || _userAssessments$asse === void 0 ? void 0 : _userAssessments$asse.find(assessment => assessment.courseId === courseId && assessment.resourceLinkId === resourceLinkId && assessment.status === 'success');\n    return existingAssessment;\n  } catch (error) {\n    console.error('Error checking existing assessment:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","ltiLaunch","idToken","response","post","id_token","data","error","_error$response","message","API_BASE_URL","handleResponse","ok","errorData","json","catch","Error","status","apiRequest","endpoint","options","url","config","fetch","createAssessment","assessmentData","method","body","JSON","stringify","console","submitGrade","assessmentId","getAssessment","getUserAssessments","userId","checkAssessmentStatus","getAssessmentWithStatus","courseId","resourceLinkId","_userAssessments$asse","userAssessments","existingAssessment","assessments","find","assessment"],"sources":["D:/nauss/htdocs/react/lti-grade-passback/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// LTI launch\r\nexport const ltiLaunch = async (idToken) => {\r\n  try {\r\n    const response = await api.post('/lti/launch', { id_token: idToken });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || error.message;\r\n  }\r\n};\r\n\r\n// client/src/services/api.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Helper function to make API requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  const response = await fetch(url, config);\r\n  return handleResponse(response);\r\n};\r\n\r\n// Create a new assessment\r\nexport const createAssessment = async (assessmentData) => {\r\n  try {\r\n    const response = await apiRequest('/assessments', {\r\n      method: 'POST',\r\n      body: JSON.stringify(assessmentData),\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error creating assessment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Submit grade to Moodle gradebook\r\nexport const submitGrade = async (assessmentId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/${assessmentId}/submit-grade`, {\r\n      method: 'POST',\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error submitting grade:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get assessment by ID\r\nexport const getAssessment = async (assessmentId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/${assessmentId}`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error fetching assessment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all assessments for a user\r\nexport const getUserAssessments = async (userId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/user/${userId}`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error fetching user assessments:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check assessment status (for polling)\r\nexport const checkAssessmentStatus = async (assessmentId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/${assessmentId}/status`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error checking assessment status:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get assessment with completed check\r\nexport const getAssessmentWithStatus = async (userId, courseId, resourceLinkId) => {\r\n  try {\r\n    const userAssessments = await getUserAssessments(userId);\r\n    \r\n    // Find existing assessment for this resource\r\n    const existingAssessment = userAssessments.assessments?.find(\r\n      assessment => \r\n        assessment.courseId === courseId && \r\n        assessment.resourceLinkId === resourceLinkId &&\r\n        assessment.status === 'success'\r\n    );\r\n    \r\n    return existingAssessment;\r\n  } catch (error) {\r\n    console.error('Error checking existing assessment:', error);\r\n    return null;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}