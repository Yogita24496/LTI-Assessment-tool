{"ast":null,"code":"// client/src/services/api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Helper function to make API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  const response = await fetch(url, config);\n  return handleResponse(response);\n};\n\n// Create a new assessment\nexport const createAssessment = async assessmentData => {\n  try {\n    const response = await apiRequest('/assessments', {\n      method: 'POST',\n      body: JSON.stringify(assessmentData)\n    });\n    return response;\n  } catch (error) {\n    console.error('Error creating assessment:', error);\n    throw error;\n  }\n};\n\n// Submit grade to Moodle gradebook\nexport const submitGrade = async assessmentId => {\n  try {\n    const response = await apiRequest(`/assessments/${assessmentId}/submit-grade`, {\n      method: 'POST'\n    });\n    return response;\n  } catch (error) {\n    console.error('Error submitting grade:', error);\n    throw error;\n  }\n};\n\n// Get assessment by ID\nexport const getAssessment = async assessmentId => {\n  try {\n    const response = await apiRequest(`/assessments/${assessmentId}`);\n    return response;\n  } catch (error) {\n    console.error('Error fetching assessment:', error);\n    throw error;\n  }\n};\n\n// Get all assessments for a user\nexport const getUserAssessments = async userId => {\n  try {\n    const response = await apiRequest(`/assessments/user/${userId}`);\n    return response;\n  } catch (error) {\n    console.error('Error fetching user assessments:', error);\n    throw error;\n  }\n};\n\n// Check assessment status (for polling)\nexport const checkAssessmentStatus = async assessmentId => {\n  try {\n    const response = await apiRequest(`/assessments/${assessmentId}/status`);\n    return response;\n  } catch (error) {\n    console.error('Error checking assessment status:', error);\n    throw error;\n  }\n};\n\n// Get assessment with completed check\nexport const getAssessmentWithStatus = async (userId, courseId, resourceLinkId) => {\n  try {\n    var _userAssessments$asse;\n    const userAssessments = await getUserAssessments(userId);\n\n    // Find existing assessment for this resource\n    const existingAssessment = (_userAssessments$asse = userAssessments.assessments) === null || _userAssessments$asse === void 0 ? void 0 : _userAssessments$asse.find(assessment => assessment.courseId === courseId && assessment.resourceLinkId === resourceLinkId && assessment.status === 'success');\n    return existingAssessment;\n  } catch (error) {\n    console.error('Error checking existing assessment:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","handleResponse","response","ok","errorData","json","catch","Error","error","status","apiRequest","endpoint","options","url","config","headers","fetch","createAssessment","assessmentData","method","body","JSON","stringify","console","submitGrade","assessmentId","getAssessment","getUserAssessments","userId","checkAssessmentStatus","getAssessmentWithStatus","courseId","resourceLinkId","_userAssessments$asse","userAssessments","existingAssessment","assessments","find","assessment"],"sources":["D:/nauss/htdocs/react/lti-grade-passback/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorData = await response.json().catch(() => ({}));\r\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Helper function to make API requests\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  const response = await fetch(url, config);\r\n  return handleResponse(response);\r\n};\r\n\r\n// Create a new assessment\r\nexport const createAssessment = async (assessmentData) => {\r\n  try {\r\n    const response = await apiRequest('/assessments', {\r\n      method: 'POST',\r\n      body: JSON.stringify(assessmentData),\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error creating assessment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Submit grade to Moodle gradebook\r\nexport const submitGrade = async (assessmentId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/${assessmentId}/submit-grade`, {\r\n      method: 'POST',\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error submitting grade:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get assessment by ID\r\nexport const getAssessment = async (assessmentId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/${assessmentId}`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error fetching assessment:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get all assessments for a user\r\nexport const getUserAssessments = async (userId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/user/${userId}`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error fetching user assessments:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check assessment status (for polling)\r\nexport const checkAssessmentStatus = async (assessmentId) => {\r\n  try {\r\n    const response = await apiRequest(`/assessments/${assessmentId}/status`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error checking assessment status:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get assessment with completed check\r\nexport const getAssessmentWithStatus = async (userId, courseId, resourceLinkId) => {\r\n  try {\r\n    const userAssessments = await getUserAssessments(userId);\r\n    \r\n    // Find existing assessment for this resource\r\n    const existingAssessment = userAssessments.assessments?.find(\r\n      assessment => \r\n        assessment.courseId === courseId && \r\n        assessment.resourceLinkId === resourceLinkId &&\r\n        assessment.status === 'success'\r\n    );\r\n    \r\n    return existingAssessment;\r\n  } catch (error) {\r\n    console.error('Error checking existing assessment:', error);\r\n    return null;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}