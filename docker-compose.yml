version: '3.8'

services:
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      server:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
    networks:
      - lti-network
    restart: unless-stopped

  server:
    build:
      context: .
      dockerfile: server/Dockerfile  # This should point to where your Dockerfile is
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://mongo:27017/lti-gradepassback
      - PORT=3001
      - NODE_ENV=production
      - PYTHON_SERVICE_URL=http://python-service:8000
    depends_on:
      mongo:
        condition: service_healthy
      python-service:
        condition: service_healthy
    networks:
      - lti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    working_dir: /app
    command: >
      sh -c "
        echo 'Waiting for dependencies...' &&
        sleep 10 &&
        echo 'Current directory:' && pwd &&
        echo 'Files in current directory:' && ls -la &&
        echo 'Checking for registerPlatform.js...' &&
        if [ -f registerPlatform.js ]; then
          echo 'Found registerPlatform.js, executing...' &&
          node registerPlatform.js
        else
          echo 'registerPlatform.js not found, skipping...'
        fi &&
        echo 'Starting server...' &&
        node server.js
      "

  python-service:
    build:
      context: .
      dockerfile: python/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHON_SERVICE_PORT=8000
      - SERVER_URL=http://server:3001
    networks:
      - lti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - lti-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    environment:
      - MONGO_INITDB_DATABASE=lti-gradepassback

volumes:
  mongo-data:

networks:
  lti-network:
    driver: bridge