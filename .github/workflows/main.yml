name: LTI Assessment CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CI: true
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: lti-assessment-app

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports: ["27017:27017"]
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # ======================
      # CLIENT (REACT) - FIXED
      # ======================
      - name: Debug - Check client directory structure
        run: |
          echo "=== Client directory contents ==="
          ls -la client/
          echo "=== package.json contents ==="
          cat client/package.json
          echo "=== Check for package-lock.json ==="
          ls -la client/package-lock.json || echo "package-lock.json not found"
      
      - name: Set up Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
      
      - name: Install client dependencies with fallback
        working-directory: ./client
        run: |
          echo "=== Starting dependency installation ==="
          
          # Try npm ci first (preferred for CI)
          if npm ci; then
            echo "npm ci succeeded"
          else
            echo "npm ci failed, trying npm install"
            rm -f package-lock.json
            npm install
          fi
          
          # Ensure react-router-dom is installed (defensive programming)
          if ! npm list react-router-dom > /dev/null 2>&1; then
            echo "react-router-dom not found, installing..."
            npm install react-router-dom@^6.8.0
          else
            echo "react-router-dom is already installed"
            npm list react-router-dom
          fi
          
          echo "=== Final dependency list ==="
          npm list --depth=0
          
          # Fix permissions for node_modules/.bin (Solution 1)
          echo "=== Fixing permissions ==="
          chmod -R +x node_modules/.bin/
          ls -la node_modules/.bin/react-scripts || echo "react-scripts not found in .bin"
      
      - name: Run client tests
        working-directory: ./client
        run: |
          echo "=== Running tests ==="
          # Solution 2: Use npx instead of npm test
          npx react-scripts test --coverage --watchAll=false --passWithNoTests --verbose
        env:
          CI: true
      
      # Alternative approach - uncomment if the above doesn't work
      # - name: Run client tests (Alternative)
      #   working-directory: ./client
      #   run: |
      #     echo "=== Running tests with direct node execution ==="
      #     node node_modules/.bin/react-scripts test --coverage --watchAll=false --passWithNoTests --verbose
      #   env:
      #     CI: true
      
      # ======================
      # SERVER (NODE.JS)
      # ======================
      - name: Set up Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
      
      - name: Install server dependencies
        working-directory: ./server
        run: |
          npm ci
          npm list --depth=0
          # Fix permissions for server as well
          chmod -R +x node_modules/.bin/
      
      - name: Run server tests
        working-directory: ./server
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/lti-test
      
      # ======================
      # PYTHON MICROSERVICE
      # ======================
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        working-directory: ./python
        run: |
          pip install -r requirements.txt
          pip list
      
      - name: Run Python tests
        working-directory: ./python
        run: pytest -v --cov=.
      
      # ======================
      # DOCKER BUILD & PUSH
      # ======================
      - name: Log in to GitHub Container Registry
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker images
        if: github.ref == 'refs/heads/master'
        run: |
          docker build -t $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-client:latest ./client
          docker build -t $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-server:latest ./server
          docker build -t $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-python:latest ./python
          
          docker push $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-client:latest
          docker push $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-server:latest
          docker push $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-python:latest
      
      # ======================
      # AWS DEPLOYMENT
      # ======================
      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Deploy to AWS ECS
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./aws/task-definition.json
          service: lti-assessment-service
          cluster: lti-cluster
          wait-for-service-stability: true
