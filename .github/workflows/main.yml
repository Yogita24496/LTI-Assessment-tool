name: LTI Assessment CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CI: true
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: lti-assessment-app

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports: ["27017:27017"]
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # ======================
      # CLIENT (REACT)
      # ======================
      - name: Set up Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
      
      - name: Install client dependencies
        working-directory: ./client
        run: |
          npm ci
          npm list --depth=0
      
      - name: Run client tests
        working-directory: ./client
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
      
      # ======================
      # SERVER (NODE.JS)
      # ======================
      - name: Set up Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
      
      - name: Install server dependencies
        working-directory: ./server
        run: |
          npm ci
          npm list --depth=0
      
      - name: Run server tests
        working-directory: ./server
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/lti-test
      
      # ======================
      # PYTHON MICROSERVICE
      # ======================
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        working-directory: ./python
        run: |
          pip install -r requirements.txt
          pip list
      
      - name: Run Python tests
        working-directory: ./python
        run: pytest -v --cov=.
      
      # ======================
      # DOCKER BUILD & PUSH
      # ======================
      - name: Log in to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker images
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-client:latest ./client
          docker build -t $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-server:latest ./server
          docker build -t $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-python:latest ./python
          
          docker push $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-client:latest
          docker push $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-server:latest
          docker push $DOCKER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME-python:latest
      
      # ======================
      # AWS DEPLOYMENT
      # ======================
      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Deploy to AWS ECS
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./aws/task-definition.json
          service: lti-assessment-service
          cluster: lti-cluster
          wait-for-service-stability: true
